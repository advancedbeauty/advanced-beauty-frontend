generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ItemType {
  SERVICE
  SHOP
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  wishlistIds   String[]  @db.ObjectId
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  Order      Order[]
  Newsletter newsletter[]
  cart       cart[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model serviceCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique
  imageSrc    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model service {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  imageSrc    String
  category    String
  title       String     @unique
  description String
  price       Float
  discount    Float
  otherInfo   Json?
  type        String     @default("service")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItem    cartItem[]
}

model shopCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique
  imageSrc    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model shop {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  imageSrc    String
  category    String
  title       String     @unique
  description String
  price       Float
  discount    Float
  otherInfo   Json?
  quantity    Int
  type        String     @default("shop")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItem    cartItem[]
}

model cart {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItem cartItem[]
}

model cartItem {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId        String  @db.ObjectId
  itemId        String  @db.ObjectId // References either service or shop item
  quantity      Int     @default(1)
  offerCode     String?
  offerDiscount Float?  @default(0)

  // For service appointments
  appointmentDate DateTime?
  appointmentTime String?

  cart      cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  service   service? @relation(fields: [itemId], references: [id], onDelete: Cascade) // Optional relation to service
  shop      shop?    @relation(fields: [itemId], references: [id], onDelete: Cascade) // Optional relation to shop
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Offer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  imageSrc  String
  code      String   @unique
  discount  Float
  maxAmount Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId 
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  totalAmount   Float
  paymentStatus PaymentStatus
  paymentId     String?
  address       String
  orderItems    OrderItem[]
  orderActions  OrderAction[]
  user          User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model OrderAction {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String      @db.ObjectId
  status    OrderStatus
  note      String?
  actionBy  String
  order     Order       @relation(fields: [orderId], references: [id])
  createdAt DateTime    @default(now())
}

model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId
  itemId     String   @db.ObjectId // References either service or shop item
  itemName   String
  itemImage  String   @default("")
  itemType   ItemType // To distinguish between service and shop items
  quantity   Int      @default(1)
  price      Float // Price at the time of or der
  discount   Float // Discount at the time of order
  finalPrice Float // Final price after discount

  // For service appointments
  appointmentDate DateTime?
  appointmentTime String?

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  imageSrc   String
  name       String
  reviewText String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model newsletter {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  email        String   @unique
  subscribedAt DateTime @default(now())
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model faq {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
